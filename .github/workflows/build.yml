on:
  push:
    branches: [main, master]
  pull_request:

name: R-CMD-check

permissions:
  contents: write
  packages: write

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release'}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes

    steps:
      - uses: actions/checkout@v4

      - uses: r-lib/actions/setup-pandoc@v2

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true

      - name: Remove ltmain.sh if it exists
        run: |
          if (Test-Path .\ltmain.sh) {
            Remove-Item -Path .\ltmain.sh -Force
            Write-Output "ltmain.sh removed"
          } else {
            Write-Output "ltmain.sh not found"
          }
        shell: pwsh

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::rcmdcheck
          needs: check

      - uses: r-lib/actions/check-r-package@v2
        with:
          upload-snapshots: true
          build_args: 'c("--no-manual", "--no-build-vignettes")'

      - name: Build binary package
        if: success()
        run: |
          pkgbuild::build(binary = TRUE)
        shell: Rscript {0}

      - name: Get package version
        id: get_version
        run: |
          echo "::set-output name=version::$(Rscript -e 'cat(as.character(read.dcf("DESCRIPTION")[1, "Version"]))')"
        shell: bash

      - name: Get latest release
        id: get_latest_release
        run: |
          latest_release=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
          echo "::set-output name=latest_release::$latest_release"
        shell: bash

      - name: Calculate new version
        id: calc_version
        run: |
          latest_version="${{ steps.get_latest_release.outputs.latest_release }}"
          if [[ $latest_version == v* ]]; then
            latest_version=${latest_version#v}
          fi
          IFS='.' read -ra version_parts <<< "$latest_version"
          ((version_parts[2]++))
          new_version="${version_parts[0]}.${version_parts[1]}.${version_parts[2]}"
          echo "::set-output name=new_version::$new_version"
        shell: bash

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.calc_version.outputs.new_version }}
          release_name: Release ${{ steps.calc_version.outputs.new_version }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: D:/a/msgxtractr/msgxtractr_${{ steps.calc_version.outputs.new_version }}.zip
          asset_name: ${{ github.event.repository.name }}_${{ steps.calc_version.outputs.new_version }}.zip
          asset_content_type: application/zip


      - name: Show testthat output
        if: always()
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check